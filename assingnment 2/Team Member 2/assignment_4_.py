# -*- coding: utf-8 -*-
"""Assignment 4 .ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18MkpS9lfOYK6qTQwqYtv4szziNhT93K3
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

"""# Load the dataset

"""

import pandas as pd
df=pd.read_csv('Mall_Customers.csv')
df.head()

df.shape

df.info()

"""# Perform below Visualizations

## -Univariate Analysis
"""

plt.scatter(df.index,df['Age'])
plt.show()

"""## -Bivariate Analysis"""

df.Age.plot()
plt.legend(['Exited','Age'])

"""## -Multivariate Analysis"""

df.plot()

"""# Perform descriptive statistics on the dataset"""

df=pd.read_csv('Mall_Customers.csv')
df.sum()

df.sum(1)

df.mean()

df.describe()

df.prod()

df.describe(include=['object'])

df. describe(include='all')

"""# Handle the Missing values"""

df.isnull()

df.notnull()

df=pd.read_csv('Mall_Customers.csv')
bool_series = pd.isnull(df["Age"])
df[bool_series]

df.fillna(0)

df.fillna(method ='pad')

df[10:25]

"""# Find the outliers and replace the outliers"""

sns.boxplot(df.Age)

df.shape

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

df=pd.read_csv('Mall_Customers.csv')
df.head()

"""### Outlier removal using IQR"""

q1=df.Age.quantile(0.25)
q3=df.Age.quantile(0.75)

IQR=q3-q1

upper_limit= q3+1.5*IQR
lower_limit= q1-1.5*IQR

df=df[df.Age<upper_limit]

sns.boxplot(df.Age)

df.shape

"""# Replacement of outliers-median"""



q1 = df.Age.quantile(0.25)
q3 = df.Age.quantile(0.75)

IQR=q3-q1

upper_limit= q3+1.5*IQR
lower_limit= q1-1.5*IQR

upper_limit

df.median()

df['Age'] = np.where(df['Age']>upper_limit,5.0,df['Age'])

sns.boxplot(df.Age)

df.shape

"""# Z-score"""

sns.boxplot(df.Age)

from scipy import stats

Age_zscore=stats.zscore(df.Age)

Age_zscore

df_z=df[np.abs(Age_zscore)<=3]

sns.boxplot(df_z['Age'])

df.shape

"""# Outlier removel with percentile"""

sns.boxplot(df.Age)

p99=df.Age.quantile(0.99)
p99

df.describe()

df=df[df.Age<=p99]

sns.boxplot(df.Age)

df.shape

"""# Check for Categorical columns and perform encoding"""

# categorical columns

import pandas as pd
import numpy as np
import random

df = pd.DataFrame({
    'x': np.linspace(0, 50, 6),
    'y': np.linspace(0, 20, 6),
    'Age': random.sample('abcdef', 6)
})
df['Age'] = pd.Categorical(df['Age'])

df.Age.dtype

df.x.dtype == 'float64'

"""## 1 label encoding"""

from sklearn.preprocessing import LabelEncoder

le=LabelEncoder()

df.Age=le.fit_transform(df.Age)
df.Annual Income (k$)=le.fit_transform(df.Annual Income (k$))

df.head()

"""## 2.One hot encoding"""

df_main=pd.get_dummies(df,columns=['Age'])
df_main.head()

df_main.corr()

"""# Split the data into dependent and independent variables"""

# X and Y split

# dependent variable

Y = df.iloc[:, -1]
print(Y)

# independent variable

X = df.iloc[:, :-1]
print(X)

"""# Scaling the data"""

import pandas as pd
import numpy as np
import seaborn as sns
from sklearn.preprocessing import scale
X = pd.DataFrame(X)
sc= StandardScaler()

X_scaled=pd.DataFrame(scale(X),columns=X.columns)
X_scaled.head()

"""# Split the data into training and testing"""

#Train Test Split

import numpy as np
from sklearn.model_selection import train_test_split

from sklearn.model_selection.train_test_split(*arrays, **options)

X = np.arange(1,25).reshape(12,2)
Y = np.array([0,1,1,0,1,0,0,1,1,0,1,0])
X

Y

X_train,X_test,Y_train,y_test = train_test_split(X,Y)
X_train

X_test

Y_train

y_test

X_train,X_test, Y_train,Y_test =train_test_split(X,Y,test_size=5, random_state=4)

X_train

X_test

Y_train

Y_test

X_train,X_test, Y_train,Y_test =train_test_split(X,Y,test_size=0.33, random_state=4,stratify=Y)

X_train

X_test

Y_train

Y_test

X_train.shape

Y_train.shape

X_test.shape

Y_test.shape

"""# Build the Model"""

from sklearn.linear_model import LinearRegression

model=LinearRegression()

model.fit(X_train,Y_train) # fitting the model on training data

Y_test

pred_test= model.predict(X_test)
pred_test

pred_train = model.predict(X_train)
pred_train

"""# Test the Model"""

pred=model.predict(X_test)

pred

# predict on random values

X_p= model.predict([[2:2]])
X_p

# Comparing

Sal= pd.DataFrame({'Actual_Salary': Y_test,'Predicted_Salary':pred})
Sal

"""# Train the Model"""

from sklearn.mode_selection import train_test_split
X_train,X_test,y_train,y_test=train_test_split(x_scaled,y,test_size=0,3,random_state=0)

X_train.shape

X_test.shape

pred=model.predict(y_train)

pred

# predict on random values

Y_p= model.predict([[1:1]])
Y_p

"""# Multi Linear Regression"""

import pandas as pd 
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

df=pd.read_csv('Mall_Customers.csv')
df.head()

df.shape

df.info()

df.isnull().any()

df.Age.value_counts()

from sklearn.preprocessing import LabelEncoder
le=LabelEncoder()

df.Age=le.fit_transform(df.Age)

df.head()

df.describe()

df.corr()

sns.heatmap(df.corr(),annot=True)

df.corr().Age.sort_values(ascending=False)

df.head()

"""# Evaluating the model"""

# accuracy score

from sklearn.metrics import accuracy_score,classification_report,confusion_matrix,roc_auc_score,roc_curve

# Confusion matrix

pd.crosstab(Y_test,pred_test)

from sklearn import metrics

# Precision 

#  TP/(TP+FP)

24/30

# Recall

# TP /(TP+FN)

24/32

# F1 score

# 2*precision*Recall / (precision+Recall)

2*0.8*0.75/(0.8+0.75)

"""# Measure the performance using Evaluation Metrics"""

def fib(n):
    if n == 0 or n == 1:
      return 1
    return fib(n-1) + fib (n-2)
print(list(fib(i) for i in range(5)))

# Commented out IPython magic to ensure Python compatibility.
# %time fib(20)

"""# Perform any of the clustering algorithms"""

from sklearn import cluster

km_model=cluster.KMeans(n_clusters=3,init='k-means++',random_state=0)

df = pd.read_csv('Mall_Customers.csv')
df.head()

new_df =df.iloc[:,:-1]
new_df.head()

new_df.shape

from sklearn import cluster

error =[]
for i in range(1,11):
    kmeans=cluster.KMeans(n_clusters=i,init='k-means++',random_state=0)
    kmeans.fit(new_df)
    error.append(kmeans.inertia_)

error

import matplotlib.pyplot as plt
plt.plot(range(1,11),Age)
plt.title('Elbow method')
plt.xlabel('no of clusters')
plt.ylabel('Age')
plt.show()

km_model=cluster.KMeans(n_clusters=3,init='k-means++',random_state=0)

km_model.fit(new_df)

km_model.predict(new_df)

km_model.predict([[5.1,3.5,1.4,0.2]])

"""##  Add the cluster data with primary dataset"""

ykmeans =km_model.predict(new_df)
ykmeans

new_df['kclus'] =pd.Series(ykmeans)

new_df.head()

